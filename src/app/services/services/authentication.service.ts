/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext} from '@angular/common/http';
import {Injectable} from '@angular/core';
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';

import {BaseService} from '../base-service';
import {ApiConfiguration} from '../api-configuration';
import {StrictHttpResponse} from '../strict-http-response';

import {activateAccount, ActivateAccount$Params} from '../fn/authentication/activate-account';
import {AppResponse} from '../models/app-response';
import {login, Login$Params} from '../fn/authentication/login';
import {register, Register$Params} from '../fn/authentication/register';


/**
 * Authentication APIs for login, registration, and activating account
 */
@Injectable({providedIn: 'root'})
export class AuthenticationService extends BaseService {
  /** Path part for operation `register()` */
  static readonly RegisterPath = '/api/v1/auth/register';
  /** Path part for operation `login()` */
  static readonly LoginPath = '/api/v1/auth/login';
  /** Path part for operation `activateAccount()` */
  static readonly ActivateAccountPath = '/api/v1/account/activate';

  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /**
   * register API.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `register()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register$Response(params: Register$Params, context?: HttpContext): Observable<StrictHttpResponse<AppResponse>> {
    return register(this.http, this.rootUrl, params, context);
  }

  /**
   * register API.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `register$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  register(params: Register$Params, context?: HttpContext): Observable<AppResponse> {
    return this.register$Response(params, context).pipe(
      map((r: StrictHttpResponse<AppResponse>): AppResponse => r.body)
    );
  }

  /**
   * Login API.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `login()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  login$Response(params: Login$Params, context?: HttpContext): Observable<StrictHttpResponse<AppResponse>> {
    return login(this.http, this.rootUrl, params, context);
  }

  /**
   * Login API.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `login$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  login(params: Login$Params, context?: HttpContext): Observable<AppResponse> {
    return this.login$Response(params, context).pipe(
      map((r: StrictHttpResponse<AppResponse>): AppResponse => r.body)
    );
  }

  /**
   * activate account API.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `activateAccount()` instead.
   *
   * This method doesn't expect any request body.
   */
  activateAccount$Response(params: ActivateAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<AppResponse>> {
    return activateAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * activate account API.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `activateAccount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  activateAccount(params: ActivateAccount$Params, context?: HttpContext): Observable<AppResponse> {
    return this.activateAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<AppResponse>): AppResponse => r.body)
    );
  }

}
