/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext} from '@angular/common/http';
import {Injectable} from '@angular/core';
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';

import {BaseService} from '../base-service';
import {ApiConfiguration} from '../api-configuration';
import {StrictHttpResponse} from '../strict-http-response';

import {AppResponse} from '../models/app-response';
import {Course} from '../models/course';
import {createCourse, CreateCourse$Params} from '../fn/courses/create-course';
import {deleteCourse, DeleteCourse$Params} from '../fn/courses/delete-course';
import {exportCourseSchedule, ExportCourseSchedule$Params} from '../fn/courses/export-course-schedule';
import {findCourse, FindCourse$Params} from '../fn/courses/find-course';
import {getCourses, GetCourses$Params} from '../fn/courses/get-courses';
import {registerCourse, RegisterCourse$Params} from '../fn/courses/register-course';
import {unregisterCourse, UnregisterCourse$Params} from '../fn/courses/unregister-course';
import {updateCourse, UpdateCourse$Params} from '../fn/courses/update-course';


/**
 * manage courses with operations like registering, unregistering,get All, creating, updating, and deleting
 */
@Injectable({providedIn: 'root'})
export class CoursesService extends BaseService {
  /** Path part for operation `findCourse()` */
  static readonly FindCoursePath = '/api/v1/courses/{id}';
  /** Path part for operation `updateCourse()` */
  static readonly UpdateCoursePath = '/api/v1/courses/{id}';
  /** Path part for operation `deleteCourse()` */
  static readonly DeleteCoursePath = '/api/v1/courses/{id}';
  /** Path part for operation `getCourses()` */
  static readonly GetCoursesPath = '/api/v1/courses';
  /** Path part for operation `createCourse()` */
  static readonly CreateCoursePath = '/api/v1/courses';
  /** Path part for operation `unregisterCourse()` */
  static readonly UnregisterCoursePath = '/api/v1/courses/unregister';
  /** Path part for operation `registerCourse()` */
  static readonly RegisterCoursePath = '/api/v1/courses/register';
  /** Path part for operation `exportCourseSchedule()` */
  static readonly ExportCourseSchedulePath = '/api/v1/courses/schedule';

  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /**
   * Get Course By Id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findCourse()` instead.
   *
   * This method doesn't expect any request body.
   */
  findCourse$Response(params: FindCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<Course>> {
    return findCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Course By Id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findCourse$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findCourse(params: FindCourse$Params, context?: HttpContext): Observable<Course> {
    return this.findCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<Course>): Course => r.body)
    );
  }

  /**
   * Update a course.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCourse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCourse$Response(params: UpdateCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<Course>> {
    return updateCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a course.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCourse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCourse(params: UpdateCourse$Params, context?: HttpContext): Observable<Course> {
    return this.updateCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<Course>): Course => r.body)
    );
  }

  /**
   * Delete a course.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCourse()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCourse$Response(params: DeleteCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<AppResponse>> {
    return deleteCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a course.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCourse$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCourse(params: DeleteCourse$Params, context?: HttpContext): Observable<AppResponse> {
    return this.deleteCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<AppResponse>): AppResponse => r.body)
    );
  }

  /**
   * Get All Courses.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCourses()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCourses$Response(params?: GetCourses$Params, context?: HttpContext): Observable<StrictHttpResponse<Course>> {
    return getCourses(this.http, this.rootUrl, params, context);
  }

  /**
   * Get All Courses.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCourses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCourses(params?: GetCourses$Params, context?: HttpContext): Observable<Course> {
    return this.getCourses$Response(params, context).pipe(
      map((r: StrictHttpResponse<Course>): Course => r.body)
    );
  }

  /**
   * Create a new course.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCourse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCourse$Response(params: CreateCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<Course>> {
    return createCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new course.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCourse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCourse(params: CreateCourse$Params, context?: HttpContext): Observable<Course> {
    return this.createCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<Course>): Course => r.body)
    );
  }

  /**
   * Unregister a course.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unregisterCourse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  unregisterCourse$Response(params: UnregisterCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<AppResponse>> {
    return unregisterCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * Unregister a course.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unregisterCourse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  unregisterCourse(params: UnregisterCourse$Params, context?: HttpContext): Observable<AppResponse> {
    return this.unregisterCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<AppResponse>): AppResponse => r.body)
    );
  }

  /**
   * Register a course.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerCourse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerCourse$Response(params: RegisterCourse$Params, context?: HttpContext): Observable<StrictHttpResponse<Course>> {
    return registerCourse(this.http, this.rootUrl, params, context);
  }

  /**
   * Register a course.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerCourse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerCourse(params: RegisterCourse$Params, context?: HttpContext): Observable<Course> {
    return this.registerCourse$Response(params, context).pipe(
      map((r: StrictHttpResponse<Course>): Course => r.body)
    );
  }

  /**
   * Get a schedule course report.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `exportCourseSchedule()` instead.
   *
   * This method doesn't expect any request body.
   */
  exportCourseSchedule$Response(params?: ExportCourseSchedule$Params, context?: HttpContext): Observable<StrictHttpResponse<AppResponse>> {
    return exportCourseSchedule(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a schedule course report.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `exportCourseSchedule$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  exportCourseSchedule(params?: ExportCourseSchedule$Params, context?: HttpContext): Observable<AppResponse> {
    return this.exportCourseSchedule$Response(params, context).pipe(
      map((r: StrictHttpResponse<AppResponse>): AppResponse => r.body)
    );
  }

}
